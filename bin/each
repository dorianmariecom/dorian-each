#!/usr/bin/env ruby
# frozen_string_literal: true

require "dorian/arguments"
require "dorian/eval"
require "dorian/progress"

parsed =
  Dorian::Arguments.parse(
    debug: {
      alias: :d
    },
    stdout: {
      aliases: %i[out o],
      default: true
    },
    stderr: {
      aliases: %i[err e],
      default: true
    },
    colorize: {
      aliases: %i[color c],
      default: true
    },
    progress: {
      alias: :p
    },
    progress_format: {
      type: :string,
      alias: :pf,
      default: "full"
    },
    rails: {
      alias: :r
    },
    version: {
      alias: :v
    },
    help: {
      alias: :h
    }
  )

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

input = parsed.files.map { |file| File.read(file) }.join("\n")
input = $stdin.each_line.to_a.map(&:strip).join("\n") if input.empty?
inputs = input.lines.map(&:strip)
ruby = parsed.arguments.join(" ")
debug = parsed.options.debug
progress = parsed.options.progress
stdout = parsed.options.stdout
stderr = parsed.options.stderr
colorize = parsed.options.colorize
total = inputs.size
format = parsed.options.progress_format
progress = progress ? Dorian::Progress.create(total:, format:) : nil
rails = parsed.options.rails

inputs.each do |it|
  Dorian::Eval.eval(it:, ruby:, debug:, stdout:, stderr:, colorize:, rails:)
  progress&.increment
end
